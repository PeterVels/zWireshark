 /**************************************************************
 MIT License
 Copyright (c) 2024 Colin Paice
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 * Contributors:
 *   Colin Paice - Initial Contribution
 ************************************************************/
#include <EZBNMCTE.h>
#include <EZBYPTHH.h>
#include <PCAP.h>
//
//  this routine is passed in a CTRACE format record
//  it has one or more CTRACE records
//  which have in turn one or more trace records
//
void printPacket(char * pIn ,int lIn)
{
 #ifdef del
  #pragma pack(1)
  // This is the structure of the pcap data header for writing
  struct
  {
      struct {
        //  pcap row header
        int seconds    ;
        int uSeconds   ;
        int capturedLength ;
        int originalLength ;
        } header;
    } pcaprow;
  #pragma pack(reset)
  #endif
    struct pcaprow pcaprow;
  int lApplData;
  //
  // process the data
  //
  struct pthdr_t r_t;
  int lpthdr_t = sizeof(r_t);
  struct cte * pCTE ;  // the CTrace Entry Record
  char * pCurr = pIn;
  int i;
  for (i = 0;; i++)
  {
    if (pCurr >=  pIn + lIn)
      break;  // off the end
    if ( debug > 0)
      printf("CTE Loop %i\n",i);
    // The record passed in is a CTrace Entry format with a header
    // the data, and a trailer.
    pCTE = (struct cte *) pCurr;
    // The data is at a specified offset from the start of the CTE
    // The length of the whole CTE is cte-> ctelen
    char * pData =((char *)  pCTE) + pCTE-> cteoff;
    // the traced data has a packet trace header followed by the packet
    // trace data
//  pCTE = (struct cte *) pCurr;
//  printf("===ctefmtid %i\n",pCTE-> ctefmtid);
    if (pCTE-> ctefmtid == 4)
       printf("Packet trace.  "); // no newline yet
    else
    if (pCTE-> ctefmtid == 5)
       printf("Data trace.  ");  // no newline yet
    else
       printf("Unknown CTE trace type %d\n",pCTE-> ctefmtid);
    struct pthdr_t * pH;
    pH = (struct pthdr_t * )  pData ;
    lApplData = pH -> PTH_Tlen ;
    int lH = pH  ->PTH_len ;
//  int lp  = pH ->  PTH_Plen ;
//  int zz = lIn - lH - lApplData ;
    if (  pH  ->  PTH_Tlen +  pH  ->PTH_len > lIn) // problem?
    {
       lApplData = lIn - pH -> PTH_Tlen ;
      if (debug > 0)
      {
         printf("bad data, buffer length %i h len %i dlen %i\n",
                 lIn, lH, lApplData);
      }
    }

    // convert the time from the record to Unix time
    unsigned long long tod;
    memcpy(&tod,&pH -> PTH_Time,8);
    tod = tod >>12;
    long   seconds = tod/1000000;
    int  uSeconds = tod % 1000000;
    int unixSeconds = seconds - 2208988800;

    int payloadLength  = pH  ->  PTH_Plen    ;
    if (debug > 0)
    {
      int seq = pH ->  PTH_SeqNum ;
      printf("Pthread Sequence %i\n", seq);
      if (pH  -> PTH_DevTy   == 53 )
         printf("IPV6-PTH6IPAQENET ");
      else
      if (pH  -> PTH_DevTy   == 39 )
         printf("IPV4-IPAQENET     ");
      else
      printf("Device type %hhu.  ",pH  -> PTH_DevTy            );
      if (pCTE-> ctefmtid == 4) // it is a packet trace
        printf("  Interface %16.16s\n",pH  -> PTH_Name. PTH_InfName);
      else
      {
        printf("  JobName %8.8s Domain 0x%2.2x Type 0x%2.2x "
               "protocol 0x%2.2x state 0x%2.2x\n",
           pH  -> PTH_Name. PTH_DtStruc. PTH_JobNm,
           pH  -> PTH_Name. PTH_DtStruc. PTH_DtDomain,
           pH  -> PTH_Name. PTH_DtStruc. PTH_DtType,
           pH  -> PTH_Name. PTH_DtStruc. PTH_DtProto,
           pH  -> PTH_Name. PTH_DtStruc. PTH_DtState);
      }
      printf("Interface index %i\n",pH  -> PTH_InfIx            );
      printf("Original Payloadlength %i\n",payloadLength);
      printf("Payload  traced %i\n",lApplData);
//    unsigned int interface = pH-> PTH_InfIx;
//    printf("interface init %i\n",interface);
      if (pCTE-> ctefmtid == 4) // it is a packet trace
        printf("segment offset %u\n",pH-> PTH_OffSegLen);
    }
    if (pH  -> PTH_len >=  lpthdr_t) // extended block
    {
      if (pH-> PTH_DropRsn ) //  drop reason code, if > 0
      {
         printf("!Drop reason code %hd\n",pH-> PTH_DropRsn);
      }
    }
    printf("Data length %i.  ",lApplData);
    if ( pH-> PTH_Flag.PTH_Local   )
       printf("PTH_ both locals .  ");
    if ( pH-> PTH_Flag.PTH_ClearTxt)
       printf("ATTLS Clear Text.  ");
    // if the data is AT-TLS encrypted, we do not get to see it
    // but this flag is set
    if ( pH-> PTH_Flag.PTH_CfTxt)
       printf("PTH_Flag.Confidential.  ");

    printf("\n");  // write the new line after one or more outputs
    // display input or output
    if ( pH-> PTH_Flag.PTH_Out ) printf("<");
       else                      printf(">");
//del int lApplData = pH  ->  PTH_Tlen;
    // print the interface name
//  printf("%16.16s ",pH  -> PTH_Name. PTH_InfName);
    if (pCTE-> ctefmtid == 4) // it is a packet trace
    {
      printf("%16.16s ",pH  -> PTH_Name. PTH_InfName);
    }
    else
    {
      printf("%8.8s ",
         pH  -> PTH_Name. PTH_DtStruc. PTH_JobNm);
    }
    //convert the IP address to printable
    printIPInfo(pH  -> PTH_Ipaddrs. PTH_Src,
                pH  -> PTH_Ipaddrs. PTH_Dst,
                pH  -> PTH_SPort,
                pH  -> PTH_DPort);
    if (pCTE-> ctefmtid == 4) // it is a packet trace
    {
     pcaprow.header.seconds = unixSeconds;
     pcaprow.header.uSeconds = uSeconds ;
     pcaprow.header.capturedLength = lApplData  ;
     pcaprow.header.originalLength = payloadLength;
     writeFile("DD:PCAP",(char * )&pcaprow  ,sizeof(pcaprow));
     printHex(stdout,&pcaprow  ,sizeof(pcaprow));
     if (lApplData > 0)
       writeFile("DD:PCAP",pData + lH, lApplData);
   }
   // now write out the record and the data
   if (debug > 0)
     fprintf(stdout,"length appl data %d\n",lApplData);
   char * p = pData + lH;
   int newline = 0;
   if (lApplData > 0)
     if (pPrint[0] == 'A') // ascii output as EBCDIC
       for( i=0; i<lApplData; i++  )
       {
          if ((*(p+i) == 0x0a || *(p+i) == 0x0d))
          {
           if (newline > 0)
              printf("\n");
           newline = 0;
          }
          else
          {
            printf("%c", ascii_tab[*(p+i)]);
            newline ++;
            if (newline  % 80 == 0 && newline  > 0 )
            {
              printf("\n");
              newline = 0;
            }
          }
       }
     else
     if (pPrint[0] == 'E') // ascii output as EBCDIC
       for( i=0; i<lApplData; i++  )
       {
          if ( isprint(*(p+i)))
             printf("%c",*(p+i));
          else
             printf(".",*(p+i));
          if (i % 80 == 0 && i > 0 )
            printf("\n");
       }
     else
     {
       printHex(stdout,p,lApplData);
     }
     printf("\n");
     // move to the next CTrace Entry within our data
     pCurr = pCurr +  pCTE-> ctelenp ; // to next CTE entry
  }
}
