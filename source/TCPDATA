 // Main routine to capture TCPIP trace DATA and write it to a
 // file which wireshark understands
 //
 /**************************************************************
 MIT License
 Copyright (c) 2024 Colin Paice
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 * Contributors:
 *   Colin Paice - Initial Contribution
 ************************************************************/
 #pragma comment (copyright,"Copyright:Colin Paice.  Version 1.1")

 // options ( all in uppercase)
 //  --PORT nnn   which port on z/OS
 //  --WAIT sss   wait up to sss seconds before stopping
 //  --PAYLOAD lll trace up to lll bytes of payload
 //  --IP n.n.n.n IP V4 address
 //  --IPV6 n:.. ::..  IP V6  address eg 2001:db8:7::4
 //  --INTERFACE  name  which z/OS TCPIP interface to use
 //  --DEBUG n    if n > 0 then print additional information
 //  --COUNT n    Limit number of records collected default 1000
 //  --TCPIP TCPIP which TCPIP instance
 //  --PRINT HEX|EBCDIC|ASCII
#ifdef delete
 //  --PCAP  n    1 is old - 2 is pcapnp
#endif
 #pragma runopts(POSIX(ON))
char * pPrint     = "X";
int debug=0;
// int pcapVer = 1; // what format data to write
  /*Include standard libraries */
  #define _LARGE_TIME_API
  #include <time.h>
  #define _XOPEN_SOURCE_EXTENDED 1
  #undef _ALL_SOURCE
  #include <sys/time.h>
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include <stdarg.h>
  #include <printhx.h>
  #include <EZBRCIFC.h>
  #define _OPEN_SYS_SOCK_IPV6
  #include <arpa/inet.h>
  #include <cpfile.h>
  #include <pripinfo.h>
  #include <tcpprint.h>
struct consoleMsg{
  char code;
  char message[128];
  char  status;
};
  // routines for operator stop command
  #include <console.h>
  #include <getiface.h>
void printHeader(RCCHeader * pR);
void printPacket(char *,int);
int main( int argc, char *argv??(??))
{
#ifdef delete
  #include<pcap.h>
  struct pcap_global_header pcap_global_header =
   {
           .magicNumber = 0xa1b2c3d4,
           .major       = 0x0002,
           .minor       = 0x0004,
           .reserverd1  = 0,
           .reserverd2  = 0,
           .snapLength  = 0x0000ffff,
           .linkType    = 0x00000065    //this is no transmission header
                                        // examples would be ethenet
   };
#endif
  struct {
           RCCHeader   header;
           union {
             RCCOpenInfo open;
             RCCFilt     filter;
             RCCGetInfo  get;
           };
  }  my;
time_t timeNow,endTime;
struct consoleMsg consoleMsg;
memset(&consoleMsg,0,sizeof(consoleMsg));
consoleStart(&consoleMsg);
  int lPayload = 1024; // the amount of payload we trace
  short port =  0; // default
  int waitTime=30 ;     // seconds
  int iArg;
  char * pInterface = "";
  char * pIPV4      = "";
  char * pIPV6      = "";
  char * pTCPIP     = "TCPIP";
  char * pJobName   = ""     ;
  int traceDiscard  = 0;
  int getCount      = 1000;
  int prefix        = 0;     // how many digits are significant
  for (iArg = 1;iArg< argc; iArg ++   )
  {
     if (strcmp(argv[iArg],"--COUNT") == 0
        && iArg + 1 < argc ) // so we have parm after kw
     {
       getCount  = atoi(argv[iArg+1]);
       iArg ++;
       continue;
     }
     if (strcmp(argv[iArg],"--PREFIX") == 0
        && iArg + 1 < argc ) // so we have parm after kw
     {
       prefix   = atoi(argv[iArg+1]);
       iArg ++;
       continue;
     }
     if (strcmp(argv[iArg],"--DISCARD") == 0
        && iArg + 1 < argc ) // so we have parm after kw
     {
       traceDiscard = atoi(argv[iArg+1]);
       iArg ++;
       continue;
     }
     else
     if (strcmp(argv[iArg],"--PORT") == 0
        && iArg + 1 < argc ) // so we have parm after kw
     {
       port = atoi(argv[iArg+1]);
       iArg ++;
       continue;
     }
     else
     if (strcmp(argv[iArg],"--WAIT") == 0
        && iArg + 1 < argc ) // so we have parm after kw
     {
       waitTime = atoi(argv[iArg+1]);
       iArg ++;
       continue;
     }
     else
     if (strcmp(argv[iArg],"--TCPIP") == 0
        && iArg + 1 < argc ) // so we have parm after kw
     {
       pTCPIP   = argv[iArg+1];
       iArg ++;
       continue;
     }
     else
     if (strcmp(argv[iArg],"--PRINT") == 0
        && iArg + 1 < argc ) // so we have parm after kw
     {
       pPrint   = argv[iArg+1];
       iArg ++;
       continue;
     }
     else
     if (strcmp(argv[iArg],"--JOBNAME") == 0
        && iArg + 1 < argc ) // so we have parm after kw
     {
       pJobName = argv[iArg+1];
       iArg ++;
       continue;
     }
     else
     if (strcmp(argv[iArg],"--PAYLOAD") == 0
        && iArg + 1 < argc ) // so we have parm after kw
     {
       lPayload = atoi(argv[iArg+1]);
       iArg ++;
       continue;
     }
     else
     if (strcmp(argv[iArg],"--IP") == 0
        && iArg + 1 < argc ) // so we have parm after kw
     {
       pIPV4 = argv[iArg+1];
       iArg ++;
       continue;
     }
     if (strcmp(argv[iArg],"--IPV6") == 0
        && iArg + 1 < argc ) // so we have parm after kw
     {
       pIPV6 = argv[iArg+1];
       iArg ++;
       continue;
     }
     else
     if (strcmp(argv[iArg],"--INTERFACE") == 0
        && iArg + 1 < argc ) // so we have parm after kw
     {
       // blank it
       pInterface = argv[iArg+1] ;
       iArg ++;
       continue;
     }
     else
     if (strcmp(argv[iArg],"--DEBUG") == 0
        && iArg + 1 < argc ) // so we have parm after kw
     {
        debug  = atoi(argv[iArg+1]);
        iArg ++;
        continue;
     }
     printf("Unknown parameter %s\n",argv[iArg]);
   }
  printf("Using port          : %hi\n",port);
  printf("      payload length: %i\n",lPayload);
  if (strlen(pIPV4) > 0)
    printf("      IPV4          : %s\n",pIPV4   );
  if (strlen(pIPV6) > 0)
    printf("      IPV6          : %s\n",pIPV6   );
  printf("      TCPIP Instance: %s\n",pTCPIP  );
  printf("      PRINT         : %s\n",pPrint  );
  printf("      WAITTIME      : %i\n",waitTime);

  time(&timeNow);
  endTime = timeNow + waitTime;
  //  if ( pcapVer ==1 ) // always pcapver 1
//writeFile("DD:PCAP", (char *)  &pcap_global_header,
//     sizeof(pcap_global_header));
  //
  //  OPEN  trace
  //
  memset(&my ,0,sizeof(my));
  my.header.RCHREye = RCHREYEC ;
  my.header.RCHRVer = RCHRVERSION1 ;
  my.header.RCHRRequest  = RCCOPEN;
  my.header.RCHRLen  = sizeof(my.header);
  my.header.RCHRNum = 1; // RCCOpeninfo

  my.open  .RCOPEye      = RCOPEYEC   ; // RCCOpeninfo
  my.open  .RCOPVer      = RCOPVERSION1;
  my.open  .RCOPLen      = sizeof(my.open);
  my.open  .RCOPFlags    = RCOPFDESC ;// use the descr below
  my.open  .RCOPFlags  |= RCOPFLOCMODE; // pass the buffer to us
  my.open  .RCOPBufSize =10 ; // buffer size in MB
  // set the TCPIP image
  memcpy(&my.open  .RCOPStack,"        ",8);
  memcpy(&my.open  .RCOPStack[0],pTCPIP,strlen(pTCPIP));
//printHex(stdout, &my.open  .RCOPStack[0],8);
  memcpy(&my.open  .RCOPDesc ,"ZWIRESHA",8); // this is ig

  int RV=0;
  int RC =0 ;
  unsigned int RS = 0;
  int lReq;
  lReq = sizeof(RCCHeader) + sizeof(RCCOpenInfo);
  EZBRCIFR((char *)&my,
    &lReq,
    &RV,
    &RC,
    &RS);
  RS = RS && 0x0000ffff;
  if ( debug > 0 || RC !=0 )
    printf("open  %i rc %i rs %i = 0x%8.8x\n",RV,RC,RS,RS);
  if (RC !=  0)
  {
    if (RC == 121 )
       printf("EZBRCIFR  Parameter error \n");
       printHex(stdout,&my,sizeof(my));
    return 8;
  }
  //
  // set filters
  //
  memset(&my.filter,0,sizeof(my.filter));
  my.header.RCHRRequest  = RCCSETFILTERS;
  lReq = sizeof(RCCHeader) + sizeof(RCCFilt);
  // now move any data we were passed
  if (strlen(pIPV4) > 0)
  {
    int rc;
    rc =inet_pton(AF_INET,pIPV4,
            &my.filter.RCFLDat.RCDAIpAddr4);
    if (rc != 1)
    {
       perror("inet_pton reading the IP V4 address");
       return 8;
    }
    my.filter.RCFLDat.RCDAFiltFlags |= RCDAFIPV4ADDR;
  }
  else if (strlen(pIPV6) > 0)
  {
    int rc;
    rc =inet_pton(AF_INET6,pIPV6,
            &my.filter.RCFLDat.RCDAIpAddr6);
    if (rc != 1)
    {
       printf("inet_pton rc %i\n",rc);
       perror("inet_pton reading the IP V6 address");
       return 8;
    }
    my.filter.RCFLDat.RCDAFiltFlags |= RCDAFIPV6ADDR;
  }
  // trace if a packet is discarded - default is no trace
  if ( traceDiscard > 0)
  {
    printf("trace discard ignored\n");
//  my.filter.RCFLDat.RCDAFiltFlags |= RCDAFDISCARD;
//  my.filter.RCFLDat. RCDADiscard   = traceDiscard;
    }
    //  10.1.2.3/xx   xx specified below
  if ( prefix  > 0)
    my.filter.RCFLDat.RCDAPrefix     = prefix;

  int lInterface = strlen(pInterface);
  if (lInterface > 0)
  {
    printf("Interface ignored -not supported \n");
  }
  lReq = sizeof(RCCHeader) + sizeof(RCCFilt);
  // need to set packet trace
  my.filter.RCFLDat.RCDAPayload= lPayload; // size of data we see
  my.filter.RCFLDat.RCDAOptFlags |=RCDAFPAYLOAD;  // need to set this
  my.filter.RCFLDat.RCDAEye    = RCDAEYEC      ;
  my.filter.RCFLEye            = RCFLEYEC;

  my.filter.RCFLDat.RCDAEye   = RCDAEYEC      ;
  my.filter.RCFLDat.RCDAVer   = RCDAVERSION1  ;
  my.filter.RCFLDat.RCDALen   = sizeof(RCCDat);
  if ( port > 0)
  {
    my.filter.RCFLDat.RCDAPortNum =   port;
    my.filter.RCFLDat.RCDAFiltFlags |= RCDAFPORTNUM;
  }
    my.filter.RCFLDat.RCDAFiltFlags |= RCDAFATTLSCLEAR;
  if (strlen(pJobName) > 0)
  {
    memcpy(&my.filter.RCFLDat. RCDAJobName,  "        ",8);
    memcpy(&my.filter.RCFLDat. RCDAJobName[0],
        pJobName,strlen(pJobName));
    my.filter.RCFLDat.RCDAFiltFlags |= RCDAFJOBNAME   ;
  }
  if ( debug > 0)
  {
    printf("Flags\n");
    printHex(stdout, &my.filter.RCFLDat.RCDAFiltFlags,2);
    if (strlen(pJobName) > 0)
      printf("JobName;%8.8s.\n",my.filter.RCFLDat. RCDAJobName);
  }

  EZBRCIFR((char *)&my,
     &lReq,
     &RV,
     &RC,
     &RS);
  RS = RS && 0x0000ffff;     // clear the high level internal stuff
  if ( debug > 0 || RC !=0 )
     printf("set filter %i rc %i rs %i = 0x%8.8x\n",RV,RC,RS,RS);
  if (RC !=  0)
  {
     printHex(stdout,(char *)&my, lReq);
     if (RC == 121 )
     printf("EZBRCIFR, line 363 Parameter error \n");
     else if (RC == 121 )
     printf("EZBRCIFR, line 366 Access error    \n");
     if ( debug > 0)
     {
        printf("Flags\n");
        printHex(stdout, &my.filter.RCFLDat.RCDAFiltFlags,2);
        printf("port   %hi\n",my.filter.RCFLDat.RCDAPortNum   );
        printf("payload%i\n",my.filter.RCFLDat.RCDAPayload   );
        printf("RCDAOptFlags\n");
        printHex(stdout,(char *)&my.filter.RCFLDat.RCDAPayload,1);
        printf("Prefix    \n");
        printHex(stdout,(char *)&my.filter.RCFLDat. RCDAPrefix,1);
        printf("Jobname   \n");
        printHex(stdout,(char *)&my.filter.RCFLDat. RCDAJobName,8);
        printf("IPV4      \n");
        printHex(stdout,(char *)&my.filter.RCFLDat.RCDAIpAddr4 ,4);
        printf("IPV6      \n");
        printHex(stdout,(char *)&my.filter.RCFLDat.RCDAIpAddr4 ,32);
     }
     return 8;
  }
  //
  // START collecting trace
  //
  my.header.RCHRRequest  = RCCSTART     ;
  my.header.RCHRNum = 0; // RCCOpeninfo
  RV=0;
  RC=0;
  RS=0;
  lReq = sizeof(RCCHeader);
  EZBRCIFR((char *)&my,
     &lReq,
     &RV,
     &RC,
     &RS);
  RS = RS && 0x0000ffff;
  if ( debug > 0 || RC !=0 )
     printf("start %i rc %i rs %i = 0x%8.8x\n",RV,RC,RS,RS);
  if (RC !=  0)
  {
     printHeader(&my.header);
     printHex(stdout,(char *)&my.header, lReq);
     if (RC == 121 )
     printf("EZBRCIFR line 367 Parameter error \n");
     return 8;
  }
  // the following line is not needed with locate mode
  // char getArea[64M*1024*1024]; // was 2048 which is too small
   int iGet = 0;
   ////////////////////////////////////////////////////////
   // get the records
   ////////////////////////////////////////////////////////
    my.header.RCHRRequest  = RCCGETRECORDS  ;
    my.header.RCHRLen  = sizeof(my.header);
    my.header.RCHRNum = 1; // 1 section
    memset(&my.get,0,sizeof(my.get));
    my.get.RCGREye              = RCGREYEC      ;
    my.get.RCGRVer              = RCGRVERSION1  ;
    my.get.RCGRLen              = sizeof(my.get);
    my.get.RCGRBufAlet          = 0;
    my.get.RCGRWaitTime         =  1    * 1000  ;    // 1 second
    RV=0;
    RC=0;
    RS=0;
    lReq = sizeof(RCCHeader)  + sizeof(my.get);

    // loop for requested number of records
    for ( iGet = 0;iGet < getCount   ;iGet++)
    {
      // check to see if we have been asked to stop
      if (consoleMsg.code == _CC_stop ) break;
      else
      if (consoleMsg.code == _CC_modify)
      {
        // if it is a modify  - we currently ignore it
        printHex(stdout,&consoleMsg,sizeof(consoleMsg));
        printf("modify message:%s.\n",consoleMsg.message);
        consoleMsg.code = 0;
      }
      EZBRCIFR((char *)&my,      // get the data record
         &lReq,
         &RV,
         &RC,
         &RS);
      RS = RS && 0x0000ffff;
     if ( debug > 0 || RC !=0 )
      printf("get %i rv %i rc %i rs %i = 0x%8.8x\n",iGet,RV,RC,RS,RS);

     if ( RC != 0)
     {
       printf("header\n");
       printHex(stdout,(char *)&my.header,sizeof(my.header));
       printf("get   \n");
       printHex(stdout,(char *)&my.get,sizeof(my.get));
       printHeader(&my.header);
       return 8;
     }
    // if we lost records, say so
    if (my.get. RCGROutFlags && RCGRFLOSSSTATE == RCGRFLOSSSTATE)
    {
      printf("lost:");
      if (my.get.RCGRLostStats.RCLSPktCount > 0)
       printf("packet trace records:%i\n",
             my.get.RCGRLostStats.RCLSPktCount );
      if (my.get.RCGRLostStats.RCLSDatCount > 0)
       printf("data trace records:%i\n",
             my.get.RCGRLostStats.RCLSDatCount );
    }
   if (my.get.RCGRBufUsed ==0 )  // no data
   {
      time(&timeNow);
      if (timeNow > endTime)
      {
        printf("end due to time out\n");
      break;
      }
    }
    else
    if (my.get.RCGRBufUsed > 0 )
    printPacket((char *) my.get.RCGRBufAddr64,
                         my.get.RCGRBufUsed);
  }
  ////////////////////////////////////////////////////////
  /// STOP
  ////////////////////////////////////////////////////////
  my.header.RCHRRequest  = RCCSTOP      ;
  my.header.RCHRNum = 0; // RCCOpeninfo
  lReq = sizeof(RCCHeader);
  EZBRCIFR((char *)&my,
     &lReq,
     &RV,
     &RC,
     &RS);
   RS = RS && 0x0000ffff;
   if ( debug > 0 || RC !=0 )
     printf("stop %i rc %i rs %i = 0x%8.8x\n",RV,RC,RS,RS);
   if (RC !=  0)
   {
     printHex(stdout,(char *)&my, lReq);
     if (RC == 121 )
     printf(" EZBRCIFR line 462  Parameter error \n");
   }
  ////////////////////////////////////////////////////////
  /// CLOSE
  ////////////////////////////////////////////////////////
  my.header.RCHRRequest  = RCCCLOSE     ;
  my.header.RCHRNum = 0;
  lReq = sizeof(RCCHeader);
  EZBRCIFR((char *)&my,
     &lReq,
     &RV,
     &RC,
     &RS);
  RS = RS && 0x0000ffff;
  if ( debug > 0 || RC !=0 )
      printf("close %i rc %i rs %i = 0x%8.8x\n",RV,RC,RS,RS);
  if (RC !=  0)
  {
     printHex(stdout,(char *)&my, lReq);
     if (RC == 121 )
     printf(" EZBRCIFR line 481 Parameter error \n");
  }
consoleStop(&consoleMsg);
}
//
// print the packet header
//
// this is used if there is a non zero rc from the trace function
void printHeader(RCCHeader * pR)
{
   printf("Version    %hi\n",pR ->RCHRVer);
   printf("Eyecatcher %4.4s\n",&pR ->RCHREye);
   int i = pR-> RCHRRequest;
   printf("Request    %i\n",i);
   printf("Len        %hd\n",pR-> RCHRLen);
   printf("Num        %hd\n",pR-> RCHRNum);
   return;
}
 //
