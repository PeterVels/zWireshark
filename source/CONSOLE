//#pragma runopts(POSIX(ON))
//
// routines to provide operator modify and stop commands for
// a C program
//

 /**************************************************************
 MIT License
 Copyright (c) 2024 Colin Paice
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 * Contributors:
 *   Colin Paice - Initial Contribution
 ************************************************************/
  /*Include standard libraries */
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include <stdarg.h>
  #include <errno.h>
  #include <sys/__messag.h>
  #define _OPEN_SYS 1
  #include <pthread.h>
  #include <signal.h>

void *thread(void * pArg ) {
  struct consoleMsg * pCM = ( struct consoleMsg * ) pArg;
  pCM -> status = 1; // say we are active
  char * pMessage = "Use f jobname,appl=data or p Jobname";
  char reply[128]; /* it gets the data */
  int  concmd; // what command was issued
  char consid[4] = "CONS";
  unsigned int msgid = 0 ;
  unsigned int routeCode[] = {0};
  unsigned int descr[] = {0};
  char cart[8] = "MYCART  ";
  struct __cons_msg2 cons;
  cons.__cm2_format       = __CONSOLE_FORMAT_3;
  cons.__cm2_msglength    = strlen(pMessage);
  cons.__cm2_msg          = pMessage;
  cons.__cm2_routcde      = routeCode;
  cons.__cm2_descr        = descr;
  cons.__cm2_token        = 0;
  cons.__cm2_msgid        = &msgid;
  cons.__cm2_dom_token    = 0;
  cons.__cm2_dom_msgid    = 0;
  cons.__cm2_mod_cartptr  = &cart[0];
  cons.__cm2_mod_considptr= &consid[0];
  memcpy(&cons.__cm2_msg_cart,&cart     ,8);
  memcpy(&cons.__cm2_msg_consid, &consid,4);
  int rc;
  int loop;
  for( loop = 0; loop < 1000;loop ++)
   {
       rc=  __console2(&cons, &reply[0], &concmd);
       if (rc != 0)
          perror("__console2");
       printf("__console2 gave rc  %d function %d\n",rc,concmd);
  #ifdef debug
       printHex(stdout,cons.__cm2_mod_cartptr,8);
       printHex(stdout,cons.__cm2_mod_considptr,4);
       memcpy(&cart[0],cons.__cm2_mod_cartptr,sizeof(cart));
       memcpy(&consid[0],cons.__cm2_mod_considptr,sizeof(consid));
       printf("Console mod CART %8.8s console id %4.4s msg CART %8.8s"
              "consid %4.4s\n",
              cart,
              consid,
              cons.__cm2_msg_cart   ,
              cons.__cm2_msg_consid   );
  #endif
       pCM -> code = concmd;
       if (concmd == _CC_modify )
          {
          printf("modify request:%s\n",reply);
          memcpy(&pCM-> message,&reply,sizeof(reply));
          }
      else
       if (concmd == _CC_stop)
          {
          printf("Stop request\n");
          break;
          }
   }
  void * ret = "thread returned\n" ;
  pCM -> status = 0; // say we are in active
  pthread_exit(ret);
}
pthread_t thid;
void consoleStart( struct consoleMsg  * pCons)
{
  if (pthread_create(&thid, NULL, thread, (void * ) pCons) != 0)
  {
    perror("pthread_create() error");
    exit(1);
  }
  return;
}
void consoleStop( struct consoleMsg  * pCons)
{
  if (pCons -> status = 0) return; // it has already ended
  int status;
  status = pthread_kill(thid, SIGABND);
  if (status  != 0)
  {
    perror("pthread_kill() error");
    printf("Status %i\n",status);
    exit(1);
  }
  return;
}
