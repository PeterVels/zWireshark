 /**************************************************************
 MIT License
 Copyright (c) 2024 Colin Paice
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 * Contributors:
 *   Colin Paice - Initial Contribution
 ************************************************************/
#include <EZBNMCTE.h>
#include <EZBYPTHH.h>

//
//  this routine is passed in a CTRACE format record
//  it has one or more CTRACE records
//  which have in turn one or more trace records
//
char * pWriteBuffer = 0;
int    lWriteBuffer = 0;
void printPacket(char * pIn ,int lIn)
{
  #pragma pack(1)
  // This is the structure of the pcap data header for writing
  struct
  {
      struct {
        //  pcap row header
        int seconds    ;
        int uSeconds   ;
        int capturedLength ;
        int originalLength ;
        } header;
         char data[0];
    } pcaprow;
  #pragma pack(reset)
  int lData;

  // now we know the amount of data to write - check buffer
  // is big enough for all of the data in the CTE entry
  // so this buffer is much bigger than needed

  if (lIn + sizeof(pcaprow.header)        > lWriteBuffer)
  {
    if (pWriteBuffer != 0)
       free(pWriteBuffer);
     lWriteBuffer = lIn + sizeof(pcaprow.header) ; // new size
     pWriteBuffer = malloc(lWriteBuffer);
     if (pWriteBuffer == 0)
     {
        perror("malloc failed");
        return  ;
     }
  }
  //
  // process the data
  //
  struct cte * pCTE ;  // the CTrace Entry Record
  char * pCurr = pIn;
  int i;
  for (i = 0;; i++)
  {
    if (pCurr >=  pIn + lIn)
      break;  // off the end
    // The record passed in is a CTrace Entry format with a header
    // the data, and a trailer.
    pCTE = (struct cte *) pCurr;
    // The data is at a specified offset from the start of the CTE
    // The length of the whole CTE is cte-> ctelen
    char * pData =((char *)  pCTE) + pCTE-> cteoff;
    // the traced data has a packet trace header followed by the packet
    // trace data
    struct pthdr_t * pH;
    pH = (struct pthdr_t * )  pData ;
    lData =  lIn - pH  ->PTH_len; //  length - header

    // convert the time from the record to Unix time
    unsigned long long tod;
    memcpy(&tod,&pH -> PTH_Time,8);
    tod = tod >>12;
    long   seconds = tod/1000000;
    int  uSeconds = tod % 1000000;
    int unixSeconds = seconds - 2208988800;

    if (debug > 0)
    {
      int seq = pH ->  PTH_SeqNum ;
      printf("Sequence    %i\n", seq);
      if (pH  -> PTH_DevTy   == 53 )
         printf("IPV6-PTH6IPAQENET ");
      else
      if (pH  -> PTH_DevTy   == 39 )
         printf("IPV4-IPAQENET     ");
      else
      printf("Device type %hhu.  ",pH  -> PTH_DevTy            );
      printf("Interface %16.16s.\n",pH  -> PTH_Name. PTH_InfName);
      printf("Interface index %i\n",pH  -> PTH_InfIx            );
    }
    if ( pH-> PTH_Flag.PTH_Local   )printf("PTH_ both locals  \n");
    if ( pH-> PTH_Flag.PTH_ClearTxt)printf("PTH_ClearTxt      \n");
    // display input or output
    if ( pH-> PTH_Flag.PTH_Out ) printf("<");
       else                      printf(">");
    if ( pH-> PTH_Flag.PTH_CfTxt)printf("PTH_Flag.Configdetail\n");
//  int writeLength    = lIn - pH  ->PTH_len ; // remove header length

    // PTH-TLen:  Field PTH_Tlen contains the amount of payload traced.
// del t payloadLength  = pH  ->  PTH_Tlen    ;
    int payloadLength  = pH  ->  PTH_Plen    ;
    int tracedLen = pH  ->  PTH_Tlen;
    int lWriteData =  tracedLen    +  sizeof(pcaprow.header) ;

    if (debug > 0)
    {
      printf("Original Payloadlength %i\n",payloadLength);
      printf("Payload  traced %i\n",tracedLen);
      printf("data     written %i\n",lWriteData );
      unsigned int interface = pH-> PTH_InfIx;
      printf("interface init %i\n",interface);
      printf("segment offset %u\n",pH-> PTH_OffSegLen);
    }
    //convert the IP address to printable
    printf("%16.16s ",pH  -> PTH_Name. PTH_InfName);
    printIPInfo(pH  -> PTH_Ipaddrs. PTH_Src,
                pH  -> PTH_Ipaddrs. PTH_Dst,
                pH  -> PTH_SPort,
                pH  -> PTH_DPort);
    // print the data we have been passed
    printHex(stdout,pData + pH-> PTH_len,
               lWriteData        );
    //         payloadLength                          );
    // we need pragma pack to avoid alignment issues
//  if ( writeLength > sizeof(pcaprow.data))
//  {
//     printf("trying to pass too much data, contact author: %i\n",
//            payloadLength);
//     writeLength = sizeof(pcaprow.data);
//  }
    if (pcapVer ==1 )   // old format
    {
//   printf("iface %i %16.16s\n",iface,pH  -> PTH_Name. PTH_InfName);
     pcaprow.header.seconds = unixSeconds;
     pcaprow.header.uSeconds = uSeconds ;
     pcaprow.header.capturedLength = tracedLen  ;
     pcaprow.header.originalLength = payloadLength;
//   memcpy(&pcaprow.data[0],pData + pH-> PTH_len , lWriteData );
     memcpy(pWriteBuffer,&pcaprow,sizeof(pcaprow));
     memcpy(pWriteBuffer+sizeof(pcaprow),
            pData + pH-> PTH_len,
            tracedLen );
//    int lWrite   =  payloadLength+sizeof(pcaprow.header);
//   writeFile("DD:PCAP",(char * )& pcaprow , lWriteData +
     writeFile("DD:PCAP",(char * )pWriteBuffer , lWriteData +
          sizeof(pcaprow.header));
//   writeFile("DD:PCAP",(char * )& pcaprow , writeLength +
    }
    else
    {
   #ifdef pcap2
     #include <pcapnp.h>
     int iface;
     iface = getInterface(&pH  -> PTH_Name. PTH_InfName);
     if ( iface < 0)
     {
        memcpy(&pcapng_idb.ovName,
               &pH  -> PTH_Name. PTH_InfName,
               sizeof(pcapng_idb.ovName));
         iface = 0-iface;   // needed for the data lock
         pcapng_idb.snapLen = 0x0000ffff;
         //  write inteface
     }
  #endif   // pcap2
    }
     // move to the next CTrace Entry within our data
     pCurr = pCurr +  pCTE-> ctelenp ; // to next CTE entry
  }
}
